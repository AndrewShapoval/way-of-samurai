{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatus","editMode","status","activateEditMode","setState","deActivateEditMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","onChange","autoFocus","onBlur","onDoubleClick","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","initialValues","error","onSubmit","onClick","className","styles","createField","Input","TextArea","type","Object","keys","contacts","map","key","ProfileData","profile","isOwner","goToEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","s","contact","ProfileInfo","useState","setEditMode","Preloader","target","files","savePhoto","descriptionBlock","src","photos","large","userPhoto","formData","saveProfile","then","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","placeholder","validate","required","MyPosts","postsElement","profilePage","posts","p","id","postsBlock","values","addPost","NewPostText","MyPostsContainer","Profile","content","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","compose"],"mappings":"6NAKIA,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAoB,IAC3CC,EAD0C,uKAGxC,OAAKC,KAAKC,MAAMN,OAET,kBAACG,EAAcE,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAI,eAHL,GAChBC,IAAML,WAStC,OADqCM,YAAQX,EAARW,CAAoCL,K,oBCjB7EM,EAAOC,QAAU,CAAC,QAAU,6BAA6B,iBAAmB,sCAAsC,QAAU,6BAA6B,MAAQ,6B,0CCAjKD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,mKCMZC,EAAb,4MACIb,MAAQ,CACJc,UAAU,EACVC,OAAQ,EAAKR,MAAMQ,QAH3B,EAKIC,iBAAmB,WACf,EAAKC,SAAS,CAACH,UAAU,KANjC,EASII,mBAAqB,WACjB,EAAKD,SAAS,CAACH,UAAU,IACzB,EAAKP,MAAMY,aAAa,EAAKnB,MAAMe,SAX3C,EAcIK,eAAiB,SAACC,GACd,EAAKJ,SAAS,CACVF,OAAQM,EAAEC,cAAcC,SAhBpC,iEAqBuBC,EAAgCC,EAAyBC,GACpEF,EAAUT,SAAWT,KAAKC,MAAMQ,QAChCT,KAAKW,SAAS,CACVF,OAAQT,KAAKC,MAAMQ,WAxBnC,+BA8BQ,OACI,6BACMT,KAAKN,MAAMc,SAIP,6BACE,2BAAOa,SAAUrB,KAAKc,eACfQ,WAAW,EACXC,OAAQvB,KAAKY,mBACbK,MAAOjB,KAAKN,MAAMe,UAP3B,6BACE,uCAAe,0BAAMe,cAAexB,KAAKU,kBAAmBV,KAAKC,MAAMQ,QAAU,gBAlCzG,GAAmCN,IAAML,W,iBCyB1B2B,EAFkBC,YAAe,CAACC,KAAM,gBAAtBD,EAzBT,SAAC,GAA+C,IAA9CE,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,MACnD,OACI,0BAAMC,SAAUH,GACZ,6BAAK,4BAAQI,QAAS,cAAjB,SACJF,GAAS,yBAAKG,UAAWC,IAAOJ,OAAQA,GACzC,6BAAK,0CAAL,IAAyBK,YAAY,YAAa,WAAY,GAAIC,MAClE,6BACI,yCACCD,YAAY,WAAY,UAAW,GAAIE,MAE5C,6BACI,kDACCF,YAAY,GAAI,iBAAkB,GAAIC,IAAO,CAACE,KAAM,cAEzD,6BACI,uCACCH,YAAY,yBAA0B,4BAA6B,GAAIE,MAE5E,6BAAK,yCAAL,IAAwBE,OAAOC,KAAKX,EAAcY,UAAUC,KAAI,SAAAC,GAAG,OAC/D,yBAAKA,IAAKA,GAAK,2BAAIA,EAAJ,KAAWR,YAAYQ,EAAK,YAAcA,EAAK,GAAIP,eCmB5EQ,EAAc,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,aACpC,OACI,6BACKD,GAAW,6BAAK,4BAAQd,QAASe,GAAjB,SACjB,6BAAK,0CAAL,IAAyBF,EAAQG,UACjC,6BAAK,yCAAL,IAAwBH,EAAQI,SAChC,6BAAK,kDAAL,IAAiCJ,EAAQK,eAAiB,MAAQ,MAClE,6BAAK,uCAAL,IAAsBL,EAAQM,2BAC9B,6BAAK,wCAAL,IAAuBZ,OAAOC,KAAKK,EAAQJ,UAAUC,KAAI,SAAAC,GAAG,OACxDE,EAAQJ,SAASE,GAAO,kBAAC,EAAD,CAASA,IAAKA,EAAKS,aAAcT,EAAKU,aAAcR,EAAQJ,SAASE,KAAU,WAM1GW,EAAU,SAAC,GAAuC,IAAtCF,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,aACnC,OACI,yBAAKpB,UAAWsB,IAAEC,SAAS,2BAAIJ,EAAJ,KAAuBC,IAI3CI,EAzDK,SAACxD,GAAsB,IAAD,EAENyD,oBAAkB,GAFZ,mBAE/BlD,EAF+B,KAErBmD,EAFqB,KAItC,IAAK1D,EAAM4C,QACP,OAAO,kBAACe,EAAA,EAAD,MAeX,OACI,6BACK3D,EAAM6C,SAAW,2BAAOR,KAAM,OAAQjB,SAdnB,SAACN,GACrBA,EAAE8C,OAAOC,OACT7D,EAAM8D,UAAUhD,EAAE8C,OAAOC,MAAM,OAa/B,yBAAK7B,UAAWsB,IAAES,kBACd,yBAAKC,IAAKhE,EAAM4C,QAAQqB,OAAOC,OAASC,MACvC5D,EACK,kBAAC,EAAD,CAAiBqB,cAAe5B,EAAM4C,QAASd,SAZhD,SAACsC,GACdpE,EAAMqE,YAAYD,GAEbE,MAAK,WAAOZ,GAAY,SAUf,kBAAC,EAAD,CAAad,QAAS5C,EAAM4C,QACfC,QAAS7C,EAAM6C,QACfC,aAAc,kBAAMY,GAAY,MACnD,kBAAC,EAAD,CAAelD,OAAQR,EAAMQ,OAAQI,aAAcZ,EAAMY,kB,4CChB1D2D,EAbqB,SAACvE,GACjC,OACI,yBAAKgC,UAAWsB,IAAEkB,MACd,yBACIR,IAAI,wHACPhE,EAAMyE,QACP,6BACI,sCAAYzE,EAAM0E,e,gBCuB5BC,EAAcC,YAAiB,IAgB/BC,EAAsBpD,YAAwB,CAACC,KAAM,yBAA/BD,EAdsC,SAACzB,GAC/D,OACI,0BAAM8B,SAAU9B,EAAM2B,cAClB,6BACI,kBAACmD,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAW5C,IAAU6C,YAAY,eACpDC,SAAU,CAACC,IAAUR,MAEhC,6BACI,iDAQDS,EAtCC,SAACpF,GAEb,IAEIqF,EAFQrF,EAAMsF,YAEOC,MAAM9C,KAAI,SAAA+C,GAAC,OAAI,kBAAC,EAAD,CAAM9C,IAAK8C,EAAEC,GAAIhB,QAASe,EAAEf,QAASC,WAAYc,EAAEd,gBAK3F,OACI,yBAAK1C,UAAWsB,IAAEoC,YACd,wCACA,kBAACb,EAAD,CAAqB/C,SAPf,SAAC6D,GACX3F,EAAM4F,QAAQD,EAAOE,gBAOjB,yBAAK7D,UAAWsB,IAAEiC,OACbF,K,QCiBFS,EAJU3F,aAjBD,SAACV,GACrB,MAAO,CACH6F,YAAa7F,EAAM6F,eAeuB,CAC9CM,aADqBzF,CAEtBiF,GC5BYW,EAdC,SAAC/F,GACb,OACI,yBAAKgC,UAAWsB,IAAE0C,SACd,kBAAC,EAAD,CAAapD,QAAS5C,EAAM4C,QACfpC,OAAQR,EAAMQ,OACdI,aAAcZ,EAAMY,aACpBiC,QAAS7C,EAAM6C,QACfiB,UAAW9D,EAAM8D,UACjBO,YAAarE,EAAMqE,cAChC,kBAAC,EAAD,Q,gBCJN4B,E,+KAEE,IAAIC,EAASnG,KAAKC,MAAMmG,MAAMC,OAAOF,OAChCA,IACDA,EAASnG,KAAKC,MAAMqG,mBAEhBtG,KAAKC,MAAMsG,QAAQC,KAAK,UAGhCxG,KAAKC,MAAMwG,eAAeN,GAC1BnG,KAAKC,MAAMyG,UAAUP,K,0CAIrBnG,KAAK2G,mB,yCAGUzF,EAAgCC,EAAyBC,GACpEpB,KAAKC,MAAMmG,MAAMC,OAAOF,SAAWjF,EAAUkF,MAAMC,OAAOF,QAC1DnG,KAAK2G,mB,+BAIT,OACI,kBAAC,EAAD,iBAAa3G,KAAKC,MAAlB,CACS4C,QAAS7C,KAAKC,MAAM4C,QACpBpC,OAAQT,KAAKC,MAAMQ,OACnBI,aAAcb,KAAKC,MAAMY,aACzBiC,SAAU9C,KAAKC,MAAMmG,MAAMC,OAAOF,OAClCpC,UAAW/D,KAAKC,MAAM8D,UACtBO,YAAatE,KAAKC,MAAMqE,mB,GA9BdnE,IAAML,WA2CtB8G,sBACX/G,IAEAO,aAXoB,SAACV,GAAD,MAA+C,CACnEmD,QAASnD,EAAM6F,YAAY1C,QAC3BpC,OAAQf,EAAM6F,YAAY9E,OAC1B6F,iBAAkB5G,EAAME,KAAK8F,GAC7B/F,OAAQD,EAAME,KAAKD,UAOqE,CACpF8G,mBACAC,cACA7F,iBACAkD,cACAO,kBAROsC,CAUbV","file":"static/js/3.27bd0894.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to= '/Login' />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return connectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__1CK3n\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2DAV8\",\"contact\":\"ProfileInfo_contact__e3sTf\",\"error\":\"ProfileInfo_error__2WqVt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3fxp7\",\"posts\":\"MyPosts_posts__UwuDo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2luqr\"};","import React, {ChangeEvent} from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<PropsType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n\r\n    deActivateEditMode = () => {\r\n        this.setState({editMode: false})\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n            }\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode\r\n                    ? <div>\r\n                        <b>Status: </b><span onDoubleClick={this.activateEditMode}>{this.props.status || \"------\"}</span>\r\n                    </div>\r\n                    : <div>\r\n                        <input onChange={this.onStatusChange}\r\n                               autoFocus={true}\r\n                               onBlur={this.deActivateEditMode}\r\n                               value={this.state.status}/>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {createField, Input, TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport styles from \"./ProfileInfo.module.css\"\r\n\r\nconst ProfileDataForm = ({handleSubmit, initialValues, error}: any) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button onClick={() => {}}>Save</button></div>\r\n            {error && <div className={styles.error}>{error}</div>}\r\n            <div><b>Full name: </b> {createField(\"Full name\", \"fullName\", [], Input)}</div>\r\n            <div>\r\n                <b>About Me: </b>\r\n                {createField(\"About me\", \"aboutMe\", [], TextArea)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>\r\n                {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>Skills: </b>\r\n                {createField(\"My professional skills\", \"lookingForAJobDescription\", [], TextArea)}\r\n            </div>\r\n            <div><b>Contacts: </b> {Object.keys(initialValues.contacts).map(key =>\r\n                <div key={key}><b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b></div>)}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<any>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/noName.png\"\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = (props: PropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData)\r\n            // @ts-ignore\r\n            .then(() => {setEditMode(false)})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto}/>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={props.profile}\r\n                                   isOwner={props.isOwner}\r\n                                   goToEditMode={() => setEditMode(true)}/>}\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: any) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n            <div><b>Full name: </b> {profile.fullName}</div>\r\n            <div><b>About Me: </b> {profile.aboutMe}</div>\r\n            <div><b>Looking for a job: </b> {profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\r\n            <div><b>Skills: </b> {profile.lookingForAJobDescription}</div>\r\n            <div><b>Contacts:</b> {Object.keys(profile.contacts).map(key =>\r\n                profile.contacts[key] ? <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/> : null\r\n            )}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}: any) => {\r\n    return (\r\n        <div className={s.contact}><b>{contactTitle}:</b>{contactValue}</div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\ntype PropsType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (e: File) => void\r\n    saveProfile: (formData: any) => void\r\n}","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype MessageType = {\r\n    message: string;\r\n    likesCount: number;\r\n}\r\n\r\nconst Post: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS7WTP-tHQOZbAbB0ZmTDrs7XX3qjexEsykECZ5K5iYrBxndlD3&usqp=CAU\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {ProfilePageType} from \"../../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (values: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    NewPostText: string\r\n}\r\n\r\n\r\nconst MyPosts = (props: PropsType) => {\r\n\r\n    let state = props.profilePage\r\n\r\n    let postsElement = state.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n    let addPost = (values: FormDataType) => {\r\n        props.addPost(values.NewPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={addPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"NewPostText\" component={TextArea} placeholder=\"Post message\"\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPost} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n// const MyPostsContainer = (props: PropsType) => {\r\n//\r\n//     let state = props.store.getState()\r\n//\r\n//     let addPost = () => {\r\n//         props.store.dispatch(addPostActionCreator(state.profilePage.newPostText))\r\n//         props.store.dispatch(updateNewPostTextActionCreator(\"\"))\r\n//     }\r\n//\r\n//     let onPostChange = (text: string) => {\r\n//         props.store.dispatch(updateNewPostTextActionCreator(text))\r\n//     }\r\n//\r\n//     return (\r\n//         <MyPosts onPostChange={onPostChange}\r\n//                  addPost={addPost}\r\n//                  posts={state.profilePage.posts}\r\n//                  newPostText={state.profilePage.newPostText}/>\r\n//     )\r\n// }\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\n// const mapDispatchToProps = (dispatch: DispatchType) => {\r\n//     return {\r\n//         addPost: () => {\r\n//             dispatch(addPostActionCreator())\r\n//         },\r\n//         onPostChange: (text: string) => {\r\n//             dispatch(updateNewPostTextActionCreator(text))\r\n//         }\r\n//     }\r\n// }\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {\r\n    addPost\r\n})(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props: PropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\ntype PropsType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (e: File) => void\r\n    saveProfile: (formData: any) => void\r\n}","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {compose} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default compose(\r\n    WithAuthRedirect,\r\n    // withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    })\r\n)(ProfileContainer)\r\n\r\n// let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n//\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent)\r\n\r\n\r\ntype PathUserIdType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: any\r\n    status: string\r\n    authorizedUserId: any\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (e: File) => void\r\n    saveProfile: (formData: any) => void\r\n}\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathUserIdType> & OwnPropsType\r\n"],"sourceRoot":""}