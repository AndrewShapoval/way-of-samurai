{"version":3,"sources":["assets/images/noName.png","redux/dialogsReducer.ts","api/api.ts","components/Users/users.module.css","assets/images/preloader.svg","components/Navbar/Navbar.module.css","serviceWorker.ts","components/Navbar/Navbar.tsx","redux/usersReducer.ts","components/common/Paginator/Paginator.tsx","components/Users/Users.tsx","redux/usersSelectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/authReducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/appReducer.ts","hoc/WithSuspense.tsx","App.tsx","redux/redux-store.ts","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","components/common/Paginator/Paginator.module.css","utils/validators/validators.ts","components/Header/Header.module.css","redux/profileReducer.ts"],"names":["module","exports","initialState","dialogs","id","name","messages","message","addMessage","newMessageText","type","dialogsReducer","state","action","newMessage","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","deleteUnFollow","userId","delete","postFollow","post","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authApi","me","login","email","password","rememberMe","logout","Boolean","window","location","hostname","match","NavBar","className","s","nav","item","to","activeClassName","active","users","totalUsersCount","isFetching","followIsProgress","updateObjectInArray","items","itemId","newObjProp","map","u","followSuccess","unFollowSuccess","setCurrentPage","pageNumber","toggleIsFetching","toggleFollowingProgress","followUnFollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","Paginator","onPageChanged","portionSize","pageCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","disabled","p","selectedPage","Users","props","key","src","photos","small","userPhoto","some","unFollow","follow","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowIsProgress","UsersContainer","this","Preloader","React","Component","compose","connect","bind","page","getState","totalCount","Header","header","loginBlock","isAuth","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","createField","required","Input","error","formSummaryError","length","stopSubmit","_error","formData","log","initialized","appReducer","WithSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","app","promise","Promise","all","reducers","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","_store_","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FormControl","input","meta","hasError","touched","formControl","children","TextArea","restProps","placeholder","validators","component","text","validate","style","backgroundColor","preloader","value","maxLengthCreator","maxLength","posts","likesCount","profile","addPost","newPostText","setStatus","getUserProfile","newPost"],"mappings":"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","file":"static/js/main.7f294133.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noName.7bce85a4.png\";","import {ActionsTypes, DialogsPageType, MessageType} from \"./store\";\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Andrew\"},\r\n        {id: 2, name: \"Sveta\"},\r\n        {id: 3, name: \"Serg\"},\r\n        {id: 4, name: \"Alecs\"},\r\n        {id: 5, name: \"Tony\"}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi!!!\"},\r\n        {id: 2, message: \"How are you???\"},\r\n        {id: 3, message: \"Cool!!!\"}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"ADD-MESSAGE\":\r\n            const newMessage: MessageType = {\r\n                id: 4,\r\n                message: action.newMessageText\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessage = (newMessageText: string) => {\r\n    return {\r\n        type: 'ADD-MESSAGE', newMessageText\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\" : \"31e30b18-0c44-4833-ae3f-a51d42aec9c6\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers (currentPage: number, pageSize: number) {\r\n        return  instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    deleteUnFollow (userId: number) {\r\n        return  instance.delete(`follow/${userId}`)\r\n    },\r\n\r\n    postFollow (userId: number) {\r\n        return  instance.post(`follow/${userId}`)\r\n    },\r\n    getProfile (userId: string) {\r\n        console.warn(\"Obsolete method. Please use profileAPI object\")\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile (userId: string) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus (userId: string) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus (status: string) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    me() {\r\n        return instance.get(`/auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`/auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`/auth/login`)\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1hlGu\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.409c5930.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2nZvc\",\"item\":\"Navbar_item__3wxZ8\",\"active\":\"Navbar_active__2o4Oe\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/News\" activeClassName={s.active}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/Music\" activeClassName={s.active}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/Settings\" activeClassName={s.active}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/Users\" activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import {ActionsTypes} from \"./store\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet initialState: initialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followIsProgress: []\r\n}\r\n\r\nconst updateObjectInArray = (items: Array<UserType>, itemId: number, newObjProp: object) => {\r\n    return items.map(u => {\r\n        if (u.id === itemId) {\r\n            return {...u, ...newObjProp}\r\n        }\r\n        return u\r\n    })\r\n}\r\n\r\nconst usersReducer = (state: initialStateType = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {...state, users: updateObjectInArray(state.users, action.userId,{followed: true})}\r\n        case 'UN_FOLLOW':\r\n            return {...state, users: updateObjectInArray(state.users, action.userId,{followed: false})}\r\n        case 'SET_USERS':\r\n            return {...state, users: action.users}\r\n        case 'SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state, followIsProgress: action.isFetching\r\n                    ? [...state.followIsProgress, action.userId]\r\n                    : state.followIsProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {type: 'FOLLOW', userId} as const\r\n}\r\n\r\nexport const unFollowSuccess = (userId: number) => {\r\n    return {type: 'UN_FOLLOW', userId} as const\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {type: 'SET_USERS', users} as const\r\n}\r\n\r\nexport const setCurrentPage = (pageNumber: number) => {\r\n    return {type: 'SET_CURRENT_PAGE', currentPage: pageNumber} as const\r\n}\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {type: 'SET_TOTAL_USERS_COUNT', totalUsersCount} as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: 'TOGGLE_IS_FETCHING', isFetching} as const\r\n}\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {type: 'TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId} as const\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch<ActionsTypes>, getState: () => AppStateType) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst followUnFollowFlow = async (dispatch: Dispatch<ActionsTypes>, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): any => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        let apiMethod = usersAPI.postFollow.bind(usersAPI)\r\n        followUnFollowFlow(dispatch, userId, apiMethod, followSuccess)\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number): any => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        let apiMethod = usersAPI.deleteUnFollow.bind(usersAPI)\r\n        followUnFollowFlow(dispatch, userId, apiMethod, unFollowSuccess)\r\n    }\r\n}\r\n\r\nexport type initialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followIsProgress: Array<number>\r\n}\r\n\r\nexport type UserType = {\r\n    id: number\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: locationType\r\n    photos: any\r\n}\r\n\r\ntype locationType = {\r\n    country: string\r\n    city: string\r\n}\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\n\r\nexport let Paginator = ({totalUsersCount, pageSize, currentPage, onPageChanged, portionSize = 20}: PropsUsersType) => {\r\n\r\n    let pageCount = Math.ceil(totalUsersCount / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pageCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}\r\n                    disabled={portionNumber === 1}>Prev\r\n            </button>\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span className={currentPage === p ? styles.selectedPage : styles.pageNumber}\r\n                                 onClick={() => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p} </span>\r\n                })}\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}\r\n                    disabled={portionCount === portionNumber}>Next\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsUsersType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../../src/assets/images/noName.png\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../redux/usersReducer\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\n\r\ntype PropsUsersType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    followIsProgress: Array<number>\r\n\r\n}\r\n\r\nexport let Users = (props: PropsUsersType) => {\r\n    return (\r\n        <div>\r\n            <Paginator totalUsersCount={props.totalUsersCount} pageSize={props.pageSize}\r\n                       currentPage={props.currentPage} onPageChanged={props.onPageChanged}/>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                           <NavLink to={\"/profile\" + u.id}>\r\n                               <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                                    className={styles.userPhoto}/>\r\n                           </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ? <button disabled={props.followIsProgress.some((id) => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.unFollow(u.id)\r\n                                          }}>Un follow</button>\r\n                                : <button disabled={props.followIsProgress.some((id) => id === u.id)}\r\n                                          onClick={() => {\r\n                                              props.follow(u.id)\r\n                                          }}>Follow</button>}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowIsProgress = (state: AppStateType) => {\r\n    return state.usersPage.followIsProgress\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    unFollow,\r\n    UserType, requestUsers\r\n} from \"../../redux/usersReducer\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowIsProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/usersSelectors\";\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followIsProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<MapStatePropsType & MapDispatchPropsType> {\r\n\r\n    // constructor(props: PropsType) {\r\n    //     super(props);\r\n    //     debugger\r\n    //     axios.get(\"https://social-network.samuraijs.com/api/1.0/users\").then(response => {\r\n    //         this.props.setUsers(response.data.items)\r\n    //     })\r\n    // }\r\n\r\n    componentDidMount(): void {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n        this.props.setCurrentPage(pageNumber)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unFollow={this.props.unFollow}\r\n                   followIsProgress={this.props.followIsProgress}/>\r\n        </>\r\n    }\r\n}\r\n\r\n// const mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followIsProgress: state.usersPage.followIsProgress\r\n//     }\r\n// }\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followIsProgress: getFollowIsProgress(state)\r\n    }\r\n}\r\n\r\n// export default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n//     follow,\r\n//     unFollow,\r\n//     setCurrentPage,\r\n//     getUsers\r\n// })(UsersContainer)\r\n\r\nexport default compose(\r\n    // WithAuthRedirect,\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        follow, unFollow, setCurrentPage, getUsers: requestUsers\r\n    })\r\n)(UsersContainer)","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n// type PropsType = {\r\n//     isAuth: boolean\r\n//     login: string\r\n// }\r\n\r\nconst Header = (props: any) => {\r\n    return (\r\n        <header className={s.header}>\r\n            {/*<img src='https://cdn.pixabay.com/photo/2015/09/17/10/30/banner-943866__340.jpg'/>*/}\r\n                <div className={s.loginBlock}>\r\n                    {props.isAuth\r\n                        ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                        : <NavLink to={'/login'}>Login</NavLink>}\r\n                </div>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import {ActionsTypes} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authApi} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type initialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state: initialStateType = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: 'AUTH/SET_USER_DATA',\r\n        payload: {id, email, login, isAuth}\r\n    } as const\r\n}\r\n\r\nexport const getAuthUserData = () => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        let response = await authApi.me()\r\n        if (response.data.resultCode === 0) {\r\n            let {id, login, email} = response.data.data\r\n            dispatch(setAuthUserData(id, email, login, true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        let response = await authApi.login(email, password, rememberMe)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit(\"Login\", {_error: message}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        let response = await authApi.logout()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<MapDispatchPropsType & MapStatePropsType> {\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(\r\n    mapStateToProps, {logout})(HeaderContainer);","import React from \"react\";\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {Field} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField(\"Email\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField(null, \"rememberMe\", null, Input, {type: \"checkbox\"}, \"Remember me\")}\r\n            {props.error &&\r\n            <div className={styles.formSummaryError}>\r\n                {props.error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'Login'})(LoginForm)\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login = (props: MapStateToPropsType & MapDispatchToPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        console.log(formData)\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(\r\n    mapStateToProps, {login})(Login)","import {ActionsTypes} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {getAuthUserData} from \"./authReducer\";\r\n\r\ntype initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state: initialStateType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state, initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: \"INITIALIZED_SUCCESS\"} as const)\r\n\r\nexport const initializeApp = () => {\r\n    return (dispatch: ActionsTypes) => {\r\n        let promise = dispatch(getAuthUserData())\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(initializedSuccess())\r\n            })\r\n    }\r\n}\r\n\r\nexport default appReducer","import React, {Suspense} from \"react\";\r\nimport {Preloader} from \"../components/common/Preloader/Preloader\";\r\n\r\nexport const WithSuspense = (Component: any) => {\r\n\r\n    return (props: any) => {\r\n        return (\r\n            <Suspense fallback={<Preloader/>}>\r\n                <Component {...props}/>\r\n            </Suspense>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport './App.css';\r\nimport NavBar from \"./components/Navbar/Navbar\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {initializeApp} from \"./redux/appReducer\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\nimport {WithSuspense} from \"./hoc/WithSuspense\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\n\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\n\r\nclass App extends React.Component<MapDispatchPropsType & MapStateToPropsType> {\r\n    componentDidMount(): void {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <NavBar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path='/profile:userId?' render={WithSuspense(ProfileContainer)}/>\r\n                    <Route path='/Dialogs' render={WithSuspense(DialogsContainer)}/>\r\n                    <Route path='/Users' render={() => <UsersContainer/>}/>\r\n                    <Route path='/Login' render={() => <Login/>}/>\r\n                    {/*<Route path='/News' render={() => <Profile posts={props.state.profilePage.posts}/>}/>*/}\r\n                    {/*<Route path='/Music' render={() => <Profile posts={props.state.profilePage.posts}/>}/>*/}\r\n                    {/*<Route path='/Settings' render={() => <Profile posts={props.state.profilePage.posts}/>}/>*/}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose(\r\n    // withRouter,\r\n    connect<MapStateToPropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        initializeApp\r\n    }))(App)\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport appReducer from \"./appReducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nconst reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n})\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\nexport type DispatchType = typeof store.dispatch\r\n//@ts-ignore\r\nwindow._store_ = store\r\n\r\n\r\nexport default store","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nimport store from './redux/redux-store';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\ntype FormsControlType = {\r\n    input: any\r\n    meta: any\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlType> = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError ? styles.error : \"\"}`}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<FormsControlType> = (props) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = (props) => {\r\n\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string,\r\n                            validators: any, component: any, props?: any, text?: string) => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name}\r\n                   validate={validators} component={component}\r\n                   {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div style={{backgroundColor: \"white\"}}>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1gWiK\",\"error\":\"FormsControls_error__1QhOD\",\"formSummaryError\":\"FormsControls_formSummaryError__3_O4V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__Laqfv\",\"pageNumber\":\"Paginator_pageNumber__2u3Bc\",\"selectedPage\":\"Paginator_selectedPage__wFc5n\"};","export const required = (value: any) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n    return (value: string) => {\r\n        if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n        return undefined\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2GBsf\",\"loginBlock\":\"Header_loginBlock__32f8Z\"};","import {ActionsTypes, PostType, ProfilePageType} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: 'How are you', likesCount: 10},\r\n        {id: 2, message: 'Well', likesCount: 23}\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            let newPost: PostType = {\r\n                id: 3,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        case \"SET_USER_PROFILE\":\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => {\r\n    debugger\r\n    return {\r\n        type: 'ADD-POST', newPostText\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: string) => {\r\n    return {type: 'SET_USER_PROFILE', profile} as const\r\n}\r\n\r\nexport const setStatus = (status: string) => {\r\n    return {type: \"SET_STATUS\", status}\r\n}\r\n\r\nexport const getUserProfile = (userId: string) => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        let response = await usersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId: string) => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        let response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch<ActionsTypes>) => {\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;"],"sourceRoot":""}